% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rasters.R
\name{pgisPolygonizeRaster}
\alias{pgisPolygonizeRaster}
\title{Convert a PostGIS raster into a polygon grid}
\usage{
pgisPolygonizeRaster(conn, tbl, name, exclude.nodata = TRUE)
}
\arguments{
\item{conn}{a PostgreSQLConnection object.}

\item{tbl}{character; input raster table name.}

\item{name}{character; output polygon table name.}

\item{exclude.nodata}{boolean; if TRUE, only those pixels whose values are
not NODATA are returned as points (default: TRUE).}
}
\description{
Convert a PostGIS raster into a polygon grid
}
\examples{
library(RPostgreSQL)
library(raster)
library(spData)
library(sf)
conn = dbConnect(drv=dbDriver("PostgreSQL"), host="localhost", port=5432,
                 dbname="foodflows", user="milo", password="postgres")
# Example 1: build a grid based on a simple raster
data(elev)
pgisWriteRaster(elev, dbname="foodflows", crs=2154)
pgisPolygonizeRaster(conn, "elev", "elev_grid", exclude.nodata=TRUE)
rast = pgisGetRaster(conn, tbl="elev")
grid = st_read(conn, "elev_grid")
plot(rast)
plot(st_geometry(grid), border="red", add=TRUE)
# Example 2: build a grid convering only a vector shape
data(seine)
sf::dbWriteTable(conn, "seine", seine, overwrite=TRUE)
pgisRasterizeTable(conn, "seine", "seine_rast", scale=10000)
pgisPolygonizeRaster(conn, "seine_rast", "seine_grid", exclude.nodata=TRUE)
rast = pgisGetRaster(conn, tbl="seine_rast", flip=TRUE)
grid = st_read(conn, "seine_grid")
plot(st_geometry(seine))
plot(rast, add=TRUE)
plot(st_geometry(grid), border="red", add=TRUE)
dbDisconnect(conn)

}
